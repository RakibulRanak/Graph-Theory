Explanation : Detecting Cycle in a graph is one of the Very important use of Depth First Search Algorithm .

To detect Cycle in a algorithm we need to modify the DFS algorithm a little bit every time when we check a adjacent node of Vertex U . Suppose the adjacent Node is V .If V is a 
Node which work is still in progress that means if it's Colour is GREY and it is not a parent of vertex U then there is a cycle . It means that actually the Vertex V is a ancestor
of Vertex U . Because in Depth First ALgorithm we go as deep we can . Then when there is no way to go further we backtrack to reach the earlier vertrex where we started from . So
during the time of checking adjacent vertices of U if we find such a vertex which work is still in progress and it's not a parent of U then the adjacent vertex V and the main 
vertex U is actually part of the same DFS tree and there is a cycle . So here we also need to pass the parent of the vertex in DFSVISIT(u,vertex,parent[u]) that is one thing we 
need to add and that is, in DFSVISIT function we will also check one more thing that if state[v] = GREY and parent[u] != v then we will be sure that there is a cycle.




bool detecting_cycle(ll u , ll vertex) {
   state[u] = GREY ;
   INC(i,0,graph[u].size()-1) {
       ll v = graph[u][i];
       if (state[v] == GREY && parent[u] != v) return true ;
       if ( state[v] == WHITE) {
           parent[v] = u ;
           detecting_cycle(v,vertex);
       }
   }
   state[u] = BLACK ;
   return false ;
}

bool dfs( ll vertex) {
    INC(i,1,vertex) state[i] = WHITE ;
    INC (i,1,vertex)  {
        if (state[i] == WHITE) {
            if(detecting_cycle(i,vertex)) return true ;
        }
    }
    return false ;
}
